levels(df$Income)
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.factor)
levels(df$Income)
View(df)
levels(df$race)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
View(test)
names(train)
dim(train)
summary(train)
str(train)
head(train)
boxplot(train$age~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Age", xlab="Income", ylab="Age")
boxplot(train$education.num~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Education Level", xlab="Income", ylab="Education Level")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(10,15)]), shade=TRUE, legend=TRUE)
boxplot(train$age~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Age", xlab="Income", ylab="Age")
boxplot(train$education.num~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Education Level", xlab="Income", ylab="Education Level")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(4,5)]), shade=TRUE, legend=TRUE)
boxplot(train$age~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Age", xlab="Income", ylab="Age")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(4,6)]), shade=TRUE, legend=TRUE)
boxplot(train$age~train$Income, varwidth=TRUE, notch=TRUE,
main="Income and Age", xlab="Income", ylab="Age")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
View(train)
cdplot(train$age, train$Income, col=c("snow", "gray"))
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"))
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
cdplot(train$age, train$Income, col=c("snow", "gray"))
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"),
main="Hours Worked VS Income", xlab="Hours Per Week", ylab = "Income")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
cdplot(train$age, train$Income, col=c("snow", "gray"),
main="Age Vs Income", xlab = "Age", ylab = "Income")
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"),
main="Hours Worked VS Income", xlab="Hours Per Week", ylab = "Income")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
cdplot(train$age, train$Income, col=c("snow", "gray"),
main="Age Vs Income", xlab = "Age", ylab = "Income")
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"),
main="Hours Worked VS Income", xlab="Hours Per Week", ylab = "Income")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.factor)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
names(train)
dim(train)
summary(train)
str(train)
head(train)
cdplot(train$age, train$Income, col=c("snow", "gray"),
main="Age Vs Income", xlab = "Age", ylab = "Income")
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"),
main="Hours Worked VS Income", xlab="Hours Per Week", ylab = "Income")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
glm1 <- glm(income~., data=train, family="binomial")
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
library(caret)
confusionMatrix(as.factor(pred), reference= test$inc)
library(caret)
confusionMatrix(as.factor(pred), reference= test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference= test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df[sapply(df, is.character)] <- lapply(df[sapply(df, is.character)], as.factor)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference= test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
pred <- ifelse(pred>0.5, 1, 0)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference= test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference= test$Income)
library(caret)
confusionMatrix(pred, reference= test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(pred, reference=as.integer(test$Income))
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$survived)
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$Income)
mean(p1==test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df <- df[,c(1,5,9,10,13,15)]
rm(list = ls())
df <- read.csv("adult.csv")
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
View(test)
View(test)
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$Income)
mean(p1==test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$Income)
mean(p1==test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$Income)
mean(p1==test$Income)
rm(list = ls())
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
str(df)
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, test$Income)
rm(list = ls())
df <- read.csv("adult.csv")
str(df)
sapply(df, function(x) sum(is.na(x)==TRUE))
sapply(df, function(x) sum(is.na(x)==TRUE))
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
p1 <- predict(nb1, newdata=test, type="class")
table(p1, test$Income)
mean(p1==test$Income)
p1 <- predict(nb1, newdata=test, type="class")
table(as.integer(p1), as.integer(test$Income))
mean(p1==test$Income)
p1 <- predict(nb1, newdata=test, type="class")
print(paste("accuracy = ", mean(p1==test$Income)))
table(as.integer(p1), as.integer(test$Income))
p1 <- predict(nb1, newdata=test, type="class")
print(paste("accuracy = ", mean(p1==as.integer(test$Income))))
table(as.integer(p1), as.integer(test$Income))
p1 <- predict(nb1, newdata=test, type="class")
print(paste("accuracy = ", mean(p1==test$Income)))
table(as.integer(p1), as.integer(test$Income))
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc <- mean(pred==test$Income)
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
confusionMatrix(as.factor(pred), reference = test$Income)
predFactor <- as.factor(pred)
confusionMatrix(as.factor(pred), reference = test$Income)
confusionMatrix(as.factor(prod), reference = test$Income)
confusionMatrix(as.factor(probs), reference = test$Income)
install.packages("lattice")
install.packages("lattice")
install.packages("ggplot2")
confusionMatrix(as.factor(pred), reference=test$Income)
library(caret)
confusionMatrix(as.factor(pred), reference=test$Income)
library(caret)
confusionMatrix(as.factor(probs), reference=test$Income)
library(caret)
confusionMatrix(as.factor(pred), reference=test$Income)
levels(pred)
levels(test$Income)
levels(as.factor(pred))
levels(test$Income))
levels(as.factor(pred))
levels(test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, " <=50K", " >50K")
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference=test$Income)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 2, 1)
acc <- mean(pred==as.integer(test$Income))
print(paste("accuracy = ", acc))
table(pred, as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(pred), reference=as.factor(as.integer(test$Income)))
p1 <- predict(nb1, newdata=test, type="class")
print(paste("accuracy = ", mean(p1==test$Income)))
table(as.integer(p1), as.integer(test$Income))
library(ROCR)
p <- predict(glm1, newdata=test, type="response")
pr <- prediction(p, test$Income)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
p1 <- predict(nb1, newdata=test, type="class")
print(paste("accuracy = ", mean(p1==test$Income)))
table(as.integer(p1), as.integer(test$Income))
library(caret)
confusionMatrix(as.factor(as.integer(p1)), reference=as.factor(as.integer(test$Income)))
library(ROCR)
pr <- prediction(probs, test$Income)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
library(ROCR)
pr <- prediction(p1, test$Income)
p1 <- predict(nb1, newdata=test, type="class")
library(caret)
confusionMatrix(as.factor(as.integer(p1)), reference=as.factor(as.integer(test$Income)))
library(ROCR)
pr2 <- prediction(p1, test$Income)
library(ROCR)
pr2 <- prediction(p1, test$Income)
p1 <- predict(nb1, newdata=test, type="class")
library(caret)
confusionMatrix(as.factor(as.integer(p1)), reference=as.factor(as.integer(test$Income)))
library(ROCR)
p1 <- predict(nb1, newdata=test, type="response")
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
logProbs <- predict(glm1, newdata=test, type="response")
logPred <- ifelse(logProbs>0.5, 2, 1)
library(caret)
confusionMatrix(as.factor(logPred), reference=as.factor(as.integer(test$Income)))
library(ROCR)
logPr <- prediction(logProbs, test$Income)
logPrf <- performance(logPr, measure = "tpr", x.measure = "fpr")
plot(logPrf)
logAuc <- performance(logPr, measure = "auc")
logAuc <- auc@y.values[[1]]
logAuc <- performance(logPr, measure = "auc")
logAuc <- logAuc@y.values[[1]]
logAuc
library(caret)
confusionMatrix(as.factor(logPred), reference=as.factor(as.integer(test$Income)))
bayesProbs <- predict(nb1, newdata=test, type="class")
library(caret)
confusionMatrix(as.factor(as.integer(bayesProbs)), reference=as.factor(as.integer(test$Income)))
logAuc <- performance(logPr, measure = "auc")
logAuc <- logAuc@y.values[[1]]
logAuc
bayesProbs <- predict(nb1, newdata=test, type="class")
library(caret)
confusionMatrix(as.factor(as.integer(bayesProbs)), reference=as.factor(as.integer(test$Income)))
library(caret)
confusionMatrix(as.factor(logPred), reference=as.factor(as.integer(test$Income)))
library(caret)
confusionMatrix(as.factor(as.integer(bayesProbs)), reference=as.factor(as.integer(test$Income)))
library(ROCR)
bayesPr <- prediction(bayesProbs, test$Income)
library(ROCR)
p1_raw <- predict(nb1, newdata=test, type="raw")
bayesPr <- prediction(p1_raw, test$Income)
library(ROCR)
bayesPr <- prediction(bayesProbs, test$Income)
library(ROCR)
bayesPr <- prediction(as.numeric(bayesProbs), test$Income)
bayesPrf <- performance(bayesPr, measure = "tpr", x.measure = "fpr")
plot(bayesPrf)
bayesAuc <- performance(bayesPr, measure = "auc")
bayesAuc <- bayesAuc@y.values[[1]]
bayesAuc
library(ROCR)
bayesPr <- prediction(as.integer(bayesProbs), test$Income)
bayesPrf <- performance(bayesPr, measure = "tpr", x.measure = "fpr")
plot(bayesPrf)
library(ROCR)
bayesPr <- prediction(as.integer(bayesProbs), as.integer(test$Income))
bayesPrf <- performance(bayesPr, measure = "tpr", x.measure = "fpr")
plot(bayesPrf)
bayesPred <- predict(nb1, newdata=test, type="class")
library(caret)
confusionMatrix(as.factor(as.integer(bayesPred)), reference=as.factor(as.integer(test$Income)))
library(ROCR)
bayesPr <- prediction(as.integer(bayesPred), as.integer(test$Income))
bayesPrf <- performance(bayesPr, measure = "tpr", x.measure = "fpr")
plot(bayesPrf)
bayesAuc <- performance(bayesPr, measure = "auc")
bayesAuc <- bayesAuc@y.values[[1]]
bayesAuc
rm(list = ls())
df <- read.csv("adult.csv")
df <- df[,c(1,5,9,10,13,15)]
df$race <- factor(df$race)
df$sex <- factor(df$sex)
df$Income <- factor(df$Income)
names(train)
set.seed(1234)
i <- sample(1:nrow(df), 0.80*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
names(train)
dim(train)
cdplot(train$age, train$Income, col=c("snow", "gray"),
main="Age Vs Income", xlab = "Age", ylab = "Income")
cdplot(train$hours.per.week, train$Income, col=c("snow", "gray"),
main="Hours Worked VS Income", xlab="Hours Per Week", ylab = "Income")
barplot(table(train$sex), xlab="Sex", ylab="Frequency",
col=c("seagreen","wheat","sienna3"))
library(vcd)
mosaic(table(train[,c(6,4)]), shade=TRUE, legend=TRUE)
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
glm1 <- glm(Income~., data=train, family="binomial")
summary(glm1)
library(e1071)
nb1 <- naiveBayes(Income~., data=train)
nb1
bayesAuc <- performance(bayesPr, measure = "auc")
